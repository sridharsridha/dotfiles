[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Pull in remote changes for the current repository and all its submodules
	p = pull --recurse-submodules

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Clone a repository including all submodules
	cl = clone --recursive

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Commit all changes
	ca = !git add -A && git commit -av

	# Mixed reset (affects HEAD and Index)
	unstage = reset HEAD --

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

   # git reword -- edit the last commit message
	reword = commit --amend --only -v

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

   # git branches lists all interesting branches
	branches = "!f() { git branch --color=always \"$@\" | grep -v -e applied/ -e archived/ -e abandoned/; }; f"

   # git rename-current-branch NAME renames the current branch
	rename-current-branch = branch -m

	# Submodules Update
   submodule-pull = submodule update --init --recursive

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

   # These are extremely nice
	ignore = "!f() { for arg in \"$@\"; do echo \"$arg\" >> .gitignore; done; git add .gitignore 2>/dev/null; }; f"
	exclude = "!f() { for arg in \"$@\"; do echo \"$arg\" >> \"$(git rev-parse --git-dir)/info/exclude\"; done; }; f"

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Set default editor to use VisualCode
	editor = vim
	pager = less -r
   autocrlf = input

[apply]

	# Detect whitespace errors when applying a patch
	 whitespace = fix

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[diff]

    # Detect copies as well as renames
    renames = copies
    tool = neovim-remote

[difftool "neovim-remote"]

    cmd = nvr -s -d $LOCAL $REMOTE

[merge]

    tool = neovim-remote
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[mergetool "neovim-remote"]

    cmd = nvr -s -d $LOCAL $BASE $REMOTE $MERGED -c 'wincmd J | wincmd ='
    trustExitCode = true
    keepBackup = true

[hub]

	protocol = ssh

[help]

  # Autocorrect mistyped commands.
	autocorrect = 1

# Use separate file for username / github token / etc
[include]

  path = ~/.gitconfig.local

[log]

  decorate = short

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)



[pager]

  status = true
  show-branch = true

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

